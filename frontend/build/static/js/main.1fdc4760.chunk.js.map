{"version":3,"sources":["App.tsx","index.tsx"],"names":["theme","createTheme","palette","primary","main","deepOrange","secondary","orange","error","red","warning","yellow","info","lightBlue","Input","styled","display","WrappedButton","files","children","props","length","Tooltip","title","className","followCursor","Button","disabled","Title","Container","Typography","variant","UploadForm","executeRecaptcha","wasm","React","useState","setFiles","name","undefined","password","validation","setValidation","nameRef","useRef","passwordRef","passwordCheckRef","alertComponent","setAlertComponent","onClick","useCallback","a","v","console","log","current","value","token","arrayBuffer","buffer","store_put","Uint8Array","successAlert","Alert","onClose","severity","sx","width","errorAlert","String","onFileChange","ev","f","target","Stack","spacing","TextField","label","helperText","inputRef","type","Grid","container","justifyContent","htmlFor","accept","id","onChange","color","component","Box","gridRow","style","Snackbar","open","TransitionComponent","Slide","DownloadForm","mmap","setMmap","memoryInGigabytesRef","mem","Number","parseInt","store_get","payload","normalizedName","replaceAll","element","document","createElement","file","Blob","href","URL","createObjectURL","download","Math","floor","Date","now","hidden","body","appendChild","click","removeChild","FormControl","FormLabel","RadioGroup","row","defaultValue","FormControlLabel","control","Radio","checked","InputProps","endAdornment","InputAdornment","position","navigator","deviceMemory","Forms","setWasm","useEffect","fetchWasm","init","useGoogleReCaptcha","maxWidth","direction","Disclaimer","trim","split","map","s","i","align","Main","reCaptchaKey","process","language","ThemeProvider","App","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1fdc4760.chunk.js","sourcesContent":["import { Button, Container, Grid, TextField, ThemeProvider, Typography, Stack, Tooltip, createTheme, styled, Box, Snackbar, Alert, Slide, RadioGroup, Radio, InputAdornment, FormControlLabel, FormControl, FormLabel } from '@mui/material';\nimport React from 'react';\nimport './App.css';\nimport { deepOrange, lightBlue, orange, red, yellow } from '@mui/material/colors';\nimport { GoogleReCaptchaProvider, IGoogleReCaptchaConsumerProps, useGoogleReCaptcha } from 'react-google-recaptcha-v3';\n\ninterface IInputFileProps {\n  files: File[],\n}\n\ninterface WasmProps {\n  wasm: WasmType,\n}\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: deepOrange[500],\n    },\n    secondary: {\n      main: orange[200],\n    },\n    error: {\n      main: red[700],\n    },\n    warning: {\n      main: yellow[400],\n    },\n    info: {\n      main: lightBlue[400],\n    }\n  },\n});\n\nconst Input = styled('input')({\n  display: 'none',\n});\n\nconst WrappedButton: React.FC<IInputFileProps & React.ComponentProps<typeof Button>> = ({ files, children, ...props }) => {\n  if (files.length === 0) {\n    return (<Tooltip title={<div className=\"tooltip-text\">레지스트리 파일을 선택하세요</div>} followCursor>\n      <span>\n        <Button {...props} disabled>\n          <>{children}</>\n        </Button>\n      </span>\n    </Tooltip>);\n  }\n\n  return (\n    <Button {...props}>\n      <>{children}</>\n    </Button>\n  );\n}\n\nconst Title: React.FC = () => (\n  <Container className=\"app-title\">\n    <Typography variant=\"h2\">메이플스토리 설정 연동<div className=\"beta-sup\"><i>beta</i></div></Typography>\n  </Container>\n);\n\nconst UploadForm: React.FC<IGoogleReCaptchaConsumerProps & WasmProps> = ({ executeRecaptcha, wasm }) => {\n  interface IFormValidation {\n    name: string | undefined,\n    password: string | undefined,\n  };\n\n  const [files, setFiles] = React.useState<File[]>([]);\n  const [validation, setValidation] = React.useState<IFormValidation>({ name: undefined, password: undefined });\n  const nameRef = React.useRef<HTMLInputElement>(null);\n  const passwordRef = React.useRef<HTMLInputElement>(null);\n  const passwordCheckRef = React.useRef<HTMLInputElement>(null);\n  const [alertComponent, setAlertComponent] = React.useState<React.ReactElement | undefined>(undefined);\n\n  const onClick = React.useCallback(async () => {\n    if (executeRecaptcha === undefined) {\n      return;\n    }\n\n    const v: IFormValidation = {\n      name: undefined,\n      password: undefined\n    };\n\n    try {\n      console.log(nameRef.current?.value);\n      if ((nameRef.current?.value.length || 0) < 3) {\n        v.name = \"3글자 이상이어야 합니다.\";\n      }\n\n      if ((passwordRef.current?.value || \"\") !== (passwordCheckRef.current?.value || \"\")) {\n        v.password = \"두 비밀번호가 다릅니다.\";\n        return;\n      }\n\n      if ((passwordRef.current?.value.length || 0) < 6) {\n        v.password = \"비밀번호는 6글자 이상이어야 합니다.\"\n      }\n    } finally {\n      setValidation(v);\n    }\n\n    if (!!v.name || !!v.password) {\n      return;\n    }\n\n    const token = await executeRecaptcha();\n    const buffer = await files[0].arrayBuffer();\n    try {\n      await wasm.store_put(new Uint8Array(buffer), nameRef.current!!.value, passwordRef.current!!.value, token);\n      const successAlert = (<Alert onClose={() => setAlertComponent(undefined)} severity=\"success\" sx={{ width: \"100%\" }}>\n        업로드에 성공하였습니다\n      </Alert>);\n      setAlertComponent(successAlert);\n    } catch (e: any) {\n      const errorAlert = (<Alert onClose={() => setAlertComponent(undefined)} severity=\"error\" sx={{ width: \"100%\" }}>\n        {String(e)}\n      </Alert>);\n      setAlertComponent(errorAlert);\n    }\n  }, [executeRecaptcha, files, wasm]);\n\n  const onFileChange = React.useCallback((ev: React.ChangeEvent<HTMLInputElement>) => {\n    const f = ev.target.files;\n    if (f === null) {\n      return;\n    }\n\n    setFiles([f[0]]);\n  }, []);\n\n  return (\n    <Stack className=\"id-pw-input\" spacing={2} width=\"md\">\n      <Typography variant=\"h5\">설정 업로드</Typography>\n      <TextField label=\"이름\" variant=\"filled\" error={!!validation.name} helperText={validation.name} inputRef={nameRef}></TextField>\n      <TextField label=\"비밀번호\" variant=\"outlined\" type=\"password\" error={!!validation.password} helperText={validation.password} inputRef={passwordRef}></TextField>\n      <TextField label=\"비밀번호(확인)\" variant=\"outlined\" type=\"password\" error={!!validation.password} helperText={validation.password} inputRef={passwordCheckRef}></TextField>\n      <Grid container justifyContent=\"space-between\" width=\"md\">\n        <label htmlFor=\"file-selector-button\">\n          <Input accept=\"text/*\" type=\"file\" id=\"file-selector-button\" onChange={onFileChange} />\n          <Button variant=\"contained\" color=\"primary\" component=\"span\">.reg 파일 선택</Button>\n        </label>\n        <Box gridRow={1} width=\"xs\" component=\"span\" style={{ \"marginLeft\": \"1em\" }} />\n        <WrappedButton variant=\"contained\" color=\"primary\" disabled={!executeRecaptcha || !wasm} files={files} onClick={onClick}>설정 업로드</WrappedButton>\n      </Grid>\n      {\n        alertComponent ? (\n          <Snackbar open onClose={() => setAlertComponent(undefined)} TransitionComponent={Slide}>\n            {alertComponent}\n          </Snackbar>\n        ) : (<></>)\n      }\n    </Stack>\n  );\n}\n\nconst DownloadForm: React.FC<IGoogleReCaptchaConsumerProps & WasmProps> = ({ executeRecaptcha, wasm }) => {\n  const nameRef = React.useRef<HTMLInputElement>(null);\n  const passwordRef = React.useRef<HTMLInputElement>(null);\n  const [mmap, setMmap] = React.useState<boolean>(false);\n  const memoryInGigabytesRef = React.useRef<HTMLInputElement>(null);\n  const [alertComponent, setAlertComponent] = React.useState<React.ReactElement | undefined>(undefined);\n  const onClick = React.useCallback(async () => {\n    if (executeRecaptcha === undefined) {\n      return;\n    }\n\n    const token = await executeRecaptcha();\n\n    try {\n      let mem = Number.parseInt(memoryInGigabytesRef.current?.value ?? \"4\", 10);\n      const payload =\n        await wasm.store_get(\n          nameRef.current!!.value,\n          passwordRef.current!!.value,\n          token,\n          mmap,\n          mem,\n        );\n\n      const normalizedName = nameRef.current!!.value.replaceAll(/[^a-zA-Z0-9\\-_]/g, \"\");\n      const element = document.createElement(\"a\");\n      const file = new Blob([payload], { type: \"text/plain\" });\n      element.href = URL.createObjectURL(file);\n      element.download = `maplestory_settings_${normalizedName}_${Math.floor(Date.now() / 1000)}.reg`;\n      element.hidden = true;\n      document.body.appendChild(element);\n      try {\n        element.click();\n      } finally {\n        document.body.removeChild(element);\n      }\n    } catch (e: any) {\n      const errorAlert = (<Alert onClose={() => setAlertComponent(undefined)} severity=\"error\" sx={{ width: \"100%\" }}>\n        {String(e)}\n      </Alert>);\n      setAlertComponent(errorAlert);\n    }\n  }, [executeRecaptcha, wasm, mmap]);\n\n  return (\n    <Stack className=\"id-pw-input\" spacing={2} width=\"sm\">\n      <Typography variant=\"h5\">설정 다운로드</Typography>\n      <TextField label=\"이름\" variant=\"filled\" inputRef={nameRef}></TextField>\n      <TextField label=\"비밀번호\" variant=\"outlined\" type=\"password\" inputRef={passwordRef}></TextField>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">메모리 맵 입출력</FormLabel>\n        <RadioGroup row defaultValue=\"no\">\n          <FormControlLabel label=\"사용\" value=\"yes\" control={<Radio onChange={(ev) => setMmap(ev.target.checked)} />} />\n          <FormControlLabel label=\"미사용\" value=\"no\" control={<Radio />} />\n        </RadioGroup>\n      </FormControl>\n      <TextField label=\"최대 메모리 사용량\" variant=\"outlined\" type=\"number\"\n        InputProps={{ endAdornment: (<InputAdornment position=\"end\">GB</InputAdornment>) }}\n        inputRef={memoryInGigabytesRef}\n        defaultValue={(navigator as unknown as { deviceMemory: number | undefined }).deviceMemory ?? 4}\n        disabled={mmap}></TextField>\n      <Grid container justifyContent=\"flex-end\">\n        <Button variant=\"contained\" color=\"primary\" disabled={!executeRecaptcha || !wasm} onClick={onClick}>설정 다운로드</Button>\n      </Grid>\n      {\n        alertComponent ? (\n          <Snackbar open onClose={() => setAlertComponent(undefined)} TransitionComponent={Slide}>\n            {alertComponent}\n          </Snackbar>\n        ) : (<></>)\n      }\n    </Stack>\n  )\n}\n\ntype WasmType = typeof import(\"./pkg\");\nconst Forms: React.FC = () => {\n  const [wasm, setWasm] = React.useState<WasmType | undefined>(undefined);\n  React.useEffect(() => {\n    const fetchWasm = async () => {\n      const wasm = await import(\"./pkg\");\n      wasm.init();\n      setWasm(wasm);\n    };\n    fetchWasm();\n  }, []);\n  const { executeRecaptcha } = useGoogleReCaptcha();\n\n  if (wasm === undefined) {\n    return (<></>);\n  }\n\n  return (\n    <Container maxWidth=\"xl\" style={{ \"padding\": \"3em\" }}>\n      <Stack className=\"forms-container\" direction=\"row\" spacing={3} justifyContent=\"center\">\n        <UploadForm executeRecaptcha={executeRecaptcha} wasm={wasm} />\n        <DownloadForm executeRecaptcha={executeRecaptcha} wasm={wasm} />\n      </Stack>\n    </Container>\n  );\n}\n\nconst disclaimer_text: string =\n  `이 서비스는 베타 버전으로 예고 없이 중지되거나 데이터가 유실될 수 있습니다.\n   설정 파일은 업로드 후 1년간 보존되며 주어진 비밀번호를 사용해 암호화되어 저장됩니다.\n   설정 파일에는 계정에 관련된 민감한 정보가 있을 수 있으므로 복잡한 비밀번호를 사용해야 합니다.\n   유추하기 쉬운 이름(ex: abc)을 사용하면 다른 사람이 동일한 이름으로 설정 파일을 업로드해 덮어씌울 수 있습니다. 이 경우 이전 사람이 업로드한 파일은 삭제되고 비밀번호도 같이 덮어씌워집니다.\n`;\n\nconst Disclaimer: React.FC = () => (\n  <Container style={{ \"marginTop\": \"4em\" }} maxWidth=\"sm\">\n    <Stack spacing={2} justifyContent=\"left\">\n      <Typography variant=\"h4\" style={{ \"margin\": \"1em\" }}>추가 정보</Typography>\n      {\n        disclaimer_text.trim().split(/\\n\\s+/).map((s, i) => (\n          <Typography variant=\"body1\" align=\"left\" key={i}>\n            {`${i}. ` + s}\n          </Typography>\n        ))\n      }\n    </Stack>\n  </Container>\n);\n\n\nconst Main: React.FC = () => {\n  return (\n    <GoogleReCaptchaProvider reCaptchaKey={process.env.REACT_APP_RECAPTCHA_KEY} language=\"ko\">\n      <ThemeProvider theme={theme}>\n        <Title />\n        <Forms />\n        <Disclaimer />\n      </ThemeProvider>\n    </GoogleReCaptchaProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nif (process.env.REACT_APP_SENTRY_DSN !== undefined) {\n  Sentry.init({\n    dsn: process.env.REACT_APP_SENTRY_DSN,\n    integrations: [new Integrations.BrowserTracing()],\n\n    // Set tracesSampleRate to 1.0 to capture 100%\n    // of transactions for performance monitoring.\n    // We recommend adjusting this value in production\n    tracesSampleRate: 1.0,\n  });\n} else {\n  console.warn(\"Sentry DSN not configured; skipping init\");\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}